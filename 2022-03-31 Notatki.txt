pandas.pydata.org

df = pd.DataFrame([[1,2],[2,3],[4,5]], columns=["a","b"])
df.columns
df['a']

df.shape #kształt

df = pd.DataFrame(np.random.randn(6, 4), columns=list('ABCD'))

df = pd.DataFrame({'A': 1.,
			'B': ('1,2,3,4')})

df = pd.DataFrame({'A': 1.,
                    'B': pd.Timestamp('20130102'),
                    'C': pd.Series(1, index=list(range(4)), dtype='float32'),
                    'D': np.array([3] * 4, dtype='int32'),
                    'E': pd.Categorical(["test", "train", "test", "train"]),
                    'F': 'foo'})
Uwaga:
5//2
da wynik 2

5/2 
da wynik 2,5

data = pd.read_csv('content/drive/MyDrive/SDA\ Data\ Science/ML-datasets-master/titanic.csv', index_col=0)

https://github.com/PiotrWNowak/SDA_zadania

df = pd.DataFrame([[Jan,1,3],[Antonia,0,4],[Grzegorz,1,6]], columns=["Imie","Płeć","Ocena"])
ds
22:43 29.03.2022

17:37 30.03.2022 cd

https://github.com/PiotrWNowak/SDA_zadania.git


df1 = pd.DataFrame({
    "A": ["A0", "A1", "A2", "A3"],
    "B": ["B0", "B1", "B2", "B3"],
    "C": ["C0", "C1", "C2", "C3"],
    "D": ["D0", "D1", "D2", "D3"],
    },
    index=[0, 1, 2, 3])

df2 = pd.DataFrame({
    "A": ["A4", "A5", "A6", "A7"],
    "B": ["B4", "B5", "B6", "B7"],
    "C": ["C4", "C5", "C6", "C7"],
    "D": ["D4", "D5", "D6", "D7"],
    },
    index=[4, 5, 6, 7])

df3 = pd.DataFrame({
    "A": ["A8", "A9", "A10", "A11"],
    "B": ["B8", "B9", "B10", "B11"],
    "C": ["C8", "C9", "C10", "C11"],
    "D": ["D8", "D9", "D10", "D11"],
    },
    index=[4, 5, 6, 7])

https://pandas.pydata.org/docs/user_guide/merging.html

pandas concat
19:49 30.03.2022


pd.concat([df1,df2])
pd.concat([df1,df2,df3]).reset_index(drop=True)
pd.concat([df1,df2,df3],axis=1)

print('DF1')
pd.concat([df1,df4], join='inner')  #łączy po części wspólnej

pd.concat([df1,df4], join='outer') #łączy wszystko
20:18 30.03.2022

pd.concat([df1,df4], join='left') #nie ma - działa tylko przy merga
pd.concat([df1,df4],axis=1)

pd.concat([df1,df4],axis=1, join='inner')

Merge:

left = pd.DataFrame({
    "key": ["K0", "K1", "K2", "K3"],
    "A": ["A0", "A1", "A2", "A3"],
    "B": ["B0", "B1", "B2", "B3"],
    })

right = pd.DataFrame({
    "key": ["K0", "K1", "K2", "K3"],
    "C": ["C0", "C1", "C2", "C3"],
    "D": ["D0", "D1", "D2", "D3"],
    })

print('left')
display(left)
print('right')
display(right)

20:25 30.03.2022

17:30 31.03.2022
pd.merge(left, right, on='id', how='left')	 #Do łączenia po tych samych nazwach kolumn (id)
pd.merge(left, right, left_on='id', right_on='ID')  #Do łączenia po róźnych nazwach kolumn (id i ID)
18:14 31.03.2022

data[data.isnull().mean(axis=1) < 0.1]

df = pd.DataFrame(np.random.normal(100, 10, 1000), columns=(['a'])
df = df.append(pd.DataFrame({'a':[100000]}))
df


plt.figure(figsize=(15,7))
plt.hist(df['a'],bins=40
plt.show()

up_limit = df['a].mean()+df['a'].std()*3
lw_limit = df['a].mean()-df['a'].std()*3

[(df['a']<up_limit) & (df['a']>lw_limit)]


pep8 - instrukcje jak pisać kod w Pythonie, linie warto łamać, 
19:21 31.03.2022

Przerwa do 19:35
19:21 31.03.2022
